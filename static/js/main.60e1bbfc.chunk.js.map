{"version":3,"sources":["businessLogic.ts","persistentState.ts","App.tsx","serviceWorkerRegistration.ts","reportWebVitals.ts","index.tsx"],"names":["EquivalenceRelation","Note","DEFAULT_SETTINGS","naturalsOnly","allowRepeats","equivalenceRelation","ReflexiveOnly","Natural","ALL_NOTES","A","ASharp","BFlat","B","C","CSharp","DFlat","D","DSharp","EFlat","E","F","FSharp","GFlat","G","GSharp","AFlat","Modification","LocalStorageKey","natural","note","modification","None","Sharp","Flat","alternativeName","noteStrings","noteString","ByPitch","alt","ByLetter","nat","sharp","sharpOfNatural","flat","flatOfNatural","naturalToNote","filter","isNotUndefined","sort","a","b","Infinity","scoreSuchThatNatLtSharpLtFlat","map","join","mod","modificationString","v","undefined","getRandomNextNote","prev","settings","arr","possibleNextNotes","getPossibleNextNotes","length","Math","floor","random","possible","slice","possibleNote","some","prevNote","rel","areEqualAccordingTo","loadSettings","x","s","localStorage","getItem","Settings","parsed","JSON","parse","loadNoteHistory","NoteHistory","Array","isArray","every","isNote","saveNoteHistory","history","stringify","setItem","App","props","state","isSettingsOpen","bindMethods","this","onCloseSettingsClick","bind","onNaturalsOnlyChange","onAllowRepeatsChange","onNoteEquivalenceRelationChange","onOpenSettingsClick","onClearHistoryClick","onNoteScreenClick","renderSettingsPage","renderNotePage","className","onClick","type","checked","onChange","value","setState","event","updateSetting","target","n","parseInt","setting","prevState","newSettings","saveSettings","currentNote","i","HTMLButtonElement","nextNote","newHistory","concat","React","Component","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","onUpdate","onSuccess","catch","error","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById","URL","process","href","origin","addEventListener","fetch","headers","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker","serviceWorkerRegistration"],"mappings":"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","file":"static/js/main.60e1bbfc.chunk.js","sourcesContent":["export interface State {\n  isSettingsOpen: boolean;\n  settings: Settings;\n  history: Note[];\n}\n\nexport interface Settings {\n  naturalsOnly: boolean;\n  allowRepeats: boolean;\n  equivalenceRelation: EquivalenceRelation;\n}\n\nexport enum EquivalenceRelation {\n  /** `ASharp !== BFlat`, `A !== ASharp` */\n  ReflexiveOnly = 0,\n  /** `ASharp === BFlat`, `A !== ASharp` */\n  ByPitch = 1,\n  /** `ASharp !== BFlat`, `A === ASharp === AFlat` */\n  ByLetter = 2,\n}\n\nexport const DEFAULT_SETTINGS: Settings = {\n  naturalsOnly: true,\n  allowRepeats: false,\n  equivalenceRelation: EquivalenceRelation.ReflexiveOnly,\n};\n\nexport enum Note {\n  A,\n  ASharp,\n  BFlat,\n  B,\n  C,\n  CSharp,\n  DFlat,\n  D,\n  DSharp,\n  EFlat,\n  E,\n  F,\n  FSharp,\n  GFlat,\n  G,\n  GSharp,\n  AFlat,\n}\n\nexport const ALL_NOTES: readonly Note[] = [\n  Note.A,\n  Note.ASharp,\n  Note.BFlat,\n  Note.B,\n  Note.C,\n  Note.CSharp,\n  Note.DFlat,\n  Note.D,\n  Note.DSharp,\n  Note.EFlat,\n  Note.E,\n  Note.F,\n  Note.FSharp,\n  Note.GFlat,\n  Note.G,\n  Note.GSharp,\n  Note.AFlat,\n];\n\nexport enum Natural {\n  A,\n  B,\n  C,\n  D,\n  E,\n  F,\n  G,\n}\n\nexport const ALL_NATURALS: readonly Natural[] = [\n  Natural.A,\n  Natural.B,\n  Natural.C,\n  Natural.D,\n  Natural.E,\n  Natural.F,\n  Natural.G,\n];\n\nexport enum Modification {\n  None,\n  Sharp,\n  Flat,\n}\n\nexport function natural(note: Note): Natural {\n  switch (note) {\n    case Note.A:\n      return Natural.A;\n    case Note.ASharp:\n      return Natural.A;\n    case Note.AFlat:\n      return Natural.A;\n\n    case Note.B:\n      return Natural.B;\n    case Note.BFlat:\n      return Natural.B;\n\n    case Note.C:\n      return Natural.C;\n    case Note.CSharp:\n      return Natural.C;\n\n    case Note.DFlat:\n      return Natural.D;\n    case Note.D:\n      return Natural.D;\n    case Note.DSharp:\n      return Natural.D;\n\n    case Note.EFlat:\n      return Natural.E;\n    case Note.E:\n      return Natural.E;\n\n    case Note.F:\n      return Natural.F;\n    case Note.FSharp:\n      return Natural.F;\n\n    case Note.GFlat:\n      return Natural.G;\n    case Note.G:\n      return Natural.G;\n    case Note.GSharp:\n      return Natural.G;\n  }\n}\n\nexport function modification(note: Note): Modification {\n  switch (note) {\n    case Note.A:\n    case Note.B:\n    case Note.C:\n    case Note.D:\n    case Note.E:\n    case Note.F:\n    case Note.G:\n      return Modification.None;\n\n    case Note.ASharp:\n    case Note.CSharp:\n    case Note.DSharp:\n    case Note.FSharp:\n    case Note.GSharp:\n      return Modification.Sharp;\n\n    case Note.AFlat:\n    case Note.BFlat:\n    case Note.DFlat:\n    case Note.EFlat:\n    case Note.GFlat:\n      return Modification.Flat;\n  }\n}\n\n/**\n    * Non-natural notes have two names (e.g., C sharp and D flat).\n    * If the provided note is not natural, the other name will be returned.\n    * If it is natural, the original note will be returned.\n  \n    * ## Example\n    * ```typescript\n    * assert(Note.DFlat === alternativeName(Note.CSharp));\n    * assert(Note.C === alternativeName(Note.C));\n    * ```\n    */\nexport function alternativeName(note: Note): Note {\n  switch (note) {\n    case Note.AFlat:\n      return Note.GSharp;\n    case Note.ASharp:\n      return Note.BFlat;\n\n    case Note.BFlat:\n      return Note.ASharp;\n\n    case Note.CSharp:\n      return Note.DFlat;\n\n    case Note.DFlat:\n      return Note.CSharp;\n    case Note.DSharp:\n      return Note.EFlat;\n\n    case Note.EFlat:\n      return Note.DSharp;\n\n    case Note.FSharp:\n      return Note.GFlat;\n\n    case Note.GFlat:\n      return Note.FSharp;\n    case Note.GSharp:\n      return Note.AFlat;\n\n    case Note.A:\n    case Note.B:\n    case Note.C:\n    case Note.D:\n    case Note.E:\n    case Note.F:\n    case Note.G:\n      return note;\n  }\n}\n\nexport function noteStrings(\n  note: Note,\n  equivalenceRelation: EquivalenceRelation\n): string {\n  function compareSuchThatOriginalNatSharpFlatIsAscending(\n    a: Note,\n    b: Note\n  ): number {\n    if (a === note) {\n      return -Infinity;\n    } else if (b === note) {\n      return Infinity;\n    } else {\n      const aScore = scoreSuchThatNatLtSharpLtFlat(a);\n      const bScore = scoreSuchThatNatLtSharpLtFlat(b);\n      return aScore - bScore;\n    }\n  }\n\n  switch (equivalenceRelation) {\n    case EquivalenceRelation.ReflexiveOnly:\n      return noteString(note);\n    case EquivalenceRelation.ByPitch: {\n      const alt = alternativeName(note);\n      if (alt === note) {\n        return noteString(note);\n      } else {\n        return noteString(note) + \"/\" + noteString(alt);\n      }\n    }\n    case EquivalenceRelation.ByLetter: {\n      const nat = natural(note);\n      const sharp = sharpOfNatural(nat);\n      const flat = flatOfNatural(nat);\n      const notes = [naturalToNote(nat), sharp, flat]\n        .filter(isNotUndefined)\n        .sort(compareSuchThatOriginalNatSharpFlatIsAscending);\n\n      return notes.map(noteString).join(\"/\");\n    }\n  }\n}\n\nexport function noteString(note: Note): string {\n  return naturalString(natural(note)) + modificationString(modification(note));\n}\n\nexport function naturalString(nat: Natural): string {\n  return Natural[nat];\n}\n\nexport function modificationString(mod: Modification): string {\n  switch (mod) {\n    case Modification.None:\n      return \"\";\n    case Modification.Sharp:\n      return \"♯\";\n    case Modification.Flat:\n      return \"♭\";\n  }\n}\n\nexport function sharpOfNatural(nat: Natural): undefined | Note {\n  switch (nat) {\n    case Natural.A:\n      return Note.ASharp;\n    case Natural.B:\n      return undefined;\n    case Natural.C:\n      return Note.CSharp;\n    case Natural.D:\n      return Note.DSharp;\n    case Natural.E:\n      return undefined;\n    case Natural.F:\n      return Note.FSharp;\n    case Natural.G:\n      return Note.GSharp;\n  }\n}\n\nexport function flatOfNatural(nat: Natural): undefined | Note {\n  switch (nat) {\n    case Natural.A:\n      return Note.AFlat;\n    case Natural.B:\n      return Note.BFlat;\n    case Natural.C:\n      return undefined;\n    case Natural.D:\n      return Note.DFlat;\n    case Natural.E:\n      return Note.EFlat;\n    case Natural.F:\n      return undefined;\n    case Natural.G:\n      return Note.GFlat;\n  }\n}\n\nexport function naturalToNote(nat: Natural): Note {\n  switch (nat) {\n    case Natural.A:\n      return Note.A;\n    case Natural.B:\n      return Note.B;\n    case Natural.C:\n      return Note.C;\n    case Natural.D:\n      return Note.D;\n    case Natural.E:\n      return Note.E;\n    case Natural.F:\n      return Note.F;\n    case Natural.G:\n      return Note.G;\n  }\n}\n\nexport function scoreSuchThatNatLtSharpLtFlat(note: Note): number {\n  switch (modification(note)) {\n    case Modification.None:\n      return 0;\n    case Modification.Sharp:\n      return 1;\n    case Modification.Flat:\n      return 2;\n  }\n}\n\nexport function isNotUndefined<T>(v: T | undefined): v is T {\n  if (v === undefined) {\n    return false;\n  } else {\n    return true;\n  }\n}\n\nexport function getRandomNextNote(\n  prev: Note[],\n  settings: Settings\n): undefined | Note {\n  const possibleNextNotes = getPossibleNextNotes(prev, settings);\n  return randomElement(possibleNextNotes);\n}\n\nexport function getPossibleNextNotes(prev: Note[], settings: Settings): Note[] {\n  let possible = ALL_NOTES.slice();\n\n  if (settings.naturalsOnly) {\n    possible = possible.filter(\n      (note) => modification(note) === Modification.None\n    );\n  }\n\n  if (settings.allowRepeats) {\n    return possible;\n  }\n\n  return possible.filter(\n    (possibleNote) =>\n      !prev.some((prevNote) =>\n        areEqualAccordingTo(\n          settings.equivalenceRelation,\n          possibleNote,\n          prevNote\n        )\n      )\n  );\n}\n\nexport function randomElement<T>(arr: T[]): undefined | T {\n  if (arr.length === 0) {\n    return undefined;\n  } else {\n    return arr[Math.floor(Math.random() * arr.length)];\n  }\n}\n\nexport function areEqualAccordingTo(\n  rel: EquivalenceRelation,\n  a: Note,\n  b: Note\n): boolean {\n  switch (rel) {\n    case EquivalenceRelation.ReflexiveOnly:\n      return a === b;\n    case EquivalenceRelation.ByPitch:\n      return a === b || a === alternativeName(b);\n    case EquivalenceRelation.ByLetter:\n      return natural(a) === natural(b);\n  }\n}\n","import {\n  DEFAULT_SETTINGS,\n  EquivalenceRelation,\n  Note,\n  Settings,\n} from \"./businessLogic\";\n\nenum LocalStorageKey {\n  Settings = \"RandNote.Settings\",\n  NoteHistory = \"RandNote.NoteHistory\",\n}\n\nexport function loadSettings(): Settings {\n  const s = localStorage.getItem(LocalStorageKey.Settings);\n  if (s === null) {\n    return DEFAULT_SETTINGS;\n  }\n\n  try {\n    const parsed = JSON.parse(s);\n    if (isValidSettings(parsed)) {\n      return parsed;\n    }\n  } catch {}\n\n  return DEFAULT_SETTINGS;\n}\n\nfunction isValidSettings(x: unknown): x is Settings {\n  return (\n    \"object\" === typeof x &&\n    x !== null &&\n    \"boolean\" === typeof (x as Settings).naturalsOnly &&\n    \"boolean\" === typeof (x as Settings).allowRepeats &&\n    \"number\" === typeof (x as Settings).equivalenceRelation &&\n    (x as Settings).equivalenceRelation in EquivalenceRelation\n  );\n}\n\nexport function saveSettings(settings: Settings) {\n  const s = JSON.stringify(settings);\n  localStorage.setItem(LocalStorageKey.Settings, s);\n}\n\nexport function loadNoteHistory(): Note[] {\n  const s = localStorage.getItem(LocalStorageKey.NoteHistory);\n  if (s === null) {\n    return [];\n  }\n\n  try {\n    const parsed = JSON.parse(s);\n    if (isValidNoteList(parsed)) {\n      return parsed;\n    }\n  } catch {}\n\n  return [];\n}\n\nfunction isValidNoteList(x: unknown): x is Note[] {\n  return Array.isArray(x) && x.every(isNote);\n}\n\nfunction isNote(x: unknown): x is Note {\n  return \"number\" === typeof Note[x as any];\n}\n\nexport function saveNoteHistory(history: Note[]) {\n  const s = JSON.stringify(history);\n  localStorage.setItem(LocalStorageKey.NoteHistory, s);\n}\n","import React from \"react\";\nimport \"./App.css\";\nimport {\n  State,\n  Note,\n  getPossibleNextNotes,\n  noteStrings,\n  getRandomNextNote,\n  Settings,\n  EquivalenceRelation,\n} from \"./businessLogic\";\nimport {\n  loadSettings,\n  loadNoteHistory,\n  saveSettings,\n  saveNoteHistory,\n} from \"./persistentState\";\n\nexport default class App extends React.Component<{}, State> {\n  constructor(props: {}) {\n    super(props);\n\n    this.state = {\n      isSettingsOpen: false,\n      settings: loadSettings(),\n      history: loadNoteHistory(),\n    };\n\n    this.bindMethods();\n  }\n\n  bindMethods() {\n    this.onCloseSettingsClick = this.onCloseSettingsClick.bind(this);\n    this.onNaturalsOnlyChange = this.onNaturalsOnlyChange.bind(this);\n    this.onAllowRepeatsChange = this.onAllowRepeatsChange.bind(this);\n    this.onNoteEquivalenceRelationChange =\n      this.onNoteEquivalenceRelationChange.bind(this);\n\n    this.onOpenSettingsClick = this.onOpenSettingsClick.bind(this);\n    this.onClearHistoryClick = this.onClearHistoryClick.bind(this);\n    this.onNoteScreenClick = this.onNoteScreenClick.bind(this);\n  }\n\n  render() {\n    if (this.state.isSettingsOpen) {\n      return this.renderSettingsPage();\n    } else {\n      return this.renderNotePage();\n    }\n  }\n\n  renderSettingsPage(): React.ReactElement {\n    return (\n      <div className=\"App\">\n        <section>\n          <button onClick={this.onCloseSettingsClick}>Close</button>\n        </section>\n        <section className=\"Settings\">\n          <label className=\"Setting\">\n            <input\n              type=\"checkbox\"\n              checked={this.state.settings.naturalsOnly}\n              onChange={this.onNaturalsOnlyChange}\n            />\n            Naturals only\n          </label>\n          <label className=\"Setting\">\n            <input\n              type=\"checkbox\"\n              checked={this.state.settings.allowRepeats}\n              onChange={this.onAllowRepeatsChange}\n            />\n            Allow repeats\n          </label>\n          <label className=\"Setting\">\n            <select\n              value={this.state.settings.equivalenceRelation}\n              onChange={this.onNoteEquivalenceRelationChange}\n            >\n              <option value={EquivalenceRelation.ReflexiveOnly}>\n                Reflexive only\n              </option>\n              <option value={EquivalenceRelation.ByPitch}>By pitch</option>\n              <option value={EquivalenceRelation.ByLetter}>By letter</option>\n            </select>\n            Note equivalence relation\n          </label>\n        </section>\n      </div>\n    );\n  }\n\n  onCloseSettingsClick() {\n    this.setState({ isSettingsOpen: false });\n  }\n\n  onNaturalsOnlyChange(event: React.ChangeEvent<HTMLInputElement>) {\n    this.updateSetting(\"naturalsOnly\", event.target.checked);\n  }\n\n  onAllowRepeatsChange(event: React.ChangeEvent<HTMLInputElement>) {\n    this.updateSetting(\"allowRepeats\", event.target.checked);\n  }\n\n  onNoteEquivalenceRelationChange(event: React.ChangeEvent<HTMLSelectElement>) {\n    const n = parseInt(event.target.value, 10);\n    if (n in EquivalenceRelation) {\n      this.updateSetting(\n        \"equivalenceRelation\",\n        n as unknown as EquivalenceRelation\n      );\n    }\n  }\n\n  updateSetting<K extends keyof Settings>(setting: K, value: Settings[K]) {\n    this.setState((prevState) => {\n      const newSettings = { ...prevState.settings, [setting]: value };\n      saveSettings(newSettings);\n      return {\n        ...prevState,\n        settings: newSettings,\n      };\n    });\n  }\n\n  renderNotePage(): React.ReactElement {\n    const currentNote: Note | undefined =\n      this.state.history[this.state.history.length - 1];\n    const { equivalenceRelation } = this.state.settings;\n\n    return (\n      <div\n        className={\n          \"App\" +\n          (getPossibleNextNotes(this.state.history, this.state.settings)\n            .length === 0\n            ? \" LastNote\"\n            : \"\")\n        }\n        onClick={this.onNoteScreenClick}\n      >\n        <section>\n          <button onClick={this.onOpenSettingsClick}>Settings</button>\n          <button onClick={this.onClearHistoryClick}>Reset</button>\n        </section>\n        <section>\n          <h2>Current note</h2>\n          {currentNote !== undefined ? (\n            <div className=\"CurrentNote\">\n              {noteStrings(currentNote, equivalenceRelation)}\n            </div>\n          ) : (\n            <div>Tap to generate</div>\n          )}\n        </section>\n        <section>\n          {this.state.history.map((note, i) => (\n            <div className=\"HistoryNote\" key={i}>\n              {noteStrings(note, equivalenceRelation)}\n            </div>\n          ))}\n        </section>\n      </div>\n    );\n  }\n\n  onOpenSettingsClick() {\n    this.setState({ isSettingsOpen: true });\n  }\n\n  onClearHistoryClick() {\n    this.setState({ history: [] });\n    saveNoteHistory([]);\n  }\n\n  onNoteScreenClick(event: React.MouseEvent) {\n    if (event.target instanceof HTMLButtonElement) {\n      return;\n    }\n\n    this.setState((prevState) => {\n      const nextNote = getRandomNextNote(prevState.history, prevState.settings);\n      const newHistory =\n        nextNote === undefined\n          ? prevState.history\n          : prevState.history.concat([nextNote]);\n      saveNoteHistory(newHistory);\n      return { ...prevState, history: newHistory };\n    });\n  }\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://cra.link/PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://cra.link/PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://cra.link/PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log('No internet connection found. App is running in offline mode.');\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport * as serviceWorkerRegistration from \"./serviceWorkerRegistration\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://cra.link/PWA\nserviceWorkerRegistration.register();\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}