{"version":3,"sources":["businessLogic.ts","persistentState.ts","App.tsx","serviceWorkerRegistration.ts","reportWebVitals.ts","index.tsx"],"names":["Note","DEFAULT_SETTINGS","naturalsOnly","allowRepeats","distinctSharpsAndFlats","Natural","Modification","LocalStorageKey","ALL_NOTES","A","ASharp","BFlat","B","C","CSharp","DFlat","D","DSharp","EFlat","E","F","FSharp","GFlat","G","GSharp","AFlat","modification","note","None","Sharp","Flat","alternativeName","noteStrings","alt","noteString","nat","natural","mod","modificationString","getRandomNextNote","prev","settings","arr","possibleNextNotes","getPossibleNextNotes","length","Math","floor","random","possible","slice","filter","includes","loadSettings","x","s","localStorage","getItem","Settings","parsed","JSON","parse","loadNoteHistory","NoteHistory","Array","isArray","every","isNote","saveNoteHistory","history","stringify","setItem","App","props","state","isSettingsOpen","bindMethods","this","onCloseSettingsClick","bind","onNaturalsOnlyChange","onAllowRepeatsChange","onDistinctSharpsAndFlatsChange","onOpenSettingsClick","onClearHistoryClick","onNoteScreenClick","renderSettingsPage","renderNotePage","className","onClick","type","checked","onChange","setState","event","updateSetting","target","setting","value","prevState","newSettings","saveSettings","currentNote","undefined","map","HTMLButtonElement","nextNote","newHistory","concat","React","Component","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","onUpdate","onSuccess","catch","error","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById","URL","process","href","origin","addEventListener","fetch","headers","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker","serviceWorkerRegistration"],"mappings":"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","file":"static/js/main.47fdf755.chunk.js","sourcesContent":["export interface State {\n  isSettingsOpen: boolean;\n  settings: Settings;\n  history: Note[];\n}\n\nexport interface Settings {\n  naturalsOnly: boolean;\n  allowRepeats: boolean;\n  distinctSharpsAndFlats: boolean;\n}\n\nexport const DEFAULT_SETTINGS: Settings = {\n  naturalsOnly: true,\n  allowRepeats: false,\n  distinctSharpsAndFlats: true,\n};\n\nexport enum Note {\n  A,\n  ASharp,\n  BFlat,\n  B,\n  C,\n  CSharp,\n  DFlat,\n  D,\n  DSharp,\n  EFlat,\n  E,\n  F,\n  FSharp,\n  GFlat,\n  G,\n  GSharp,\n  AFlat,\n}\n\nexport const ALL_NOTES: readonly Note[] = [\n  Note.A,\n  Note.ASharp,\n  Note.BFlat,\n  Note.B,\n  Note.C,\n  Note.CSharp,\n  Note.DFlat,\n  Note.D,\n  Note.DSharp,\n  Note.EFlat,\n  Note.E,\n  Note.F,\n  Note.FSharp,\n  Note.GFlat,\n  Note.G,\n  Note.GSharp,\n  Note.AFlat,\n];\n\nexport enum Natural {\n  A,\n  B,\n  C,\n  D,\n  E,\n  F,\n  G,\n}\n\nexport enum Modification {\n  None,\n  Sharp,\n  Flat,\n}\n\nexport function natural(note: Note): Natural {\n  switch (note) {\n    case Note.A:\n      return Natural.A;\n    case Note.ASharp:\n      return Natural.A;\n    case Note.AFlat:\n      return Natural.A;\n\n    case Note.B:\n      return Natural.B;\n    case Note.BFlat:\n      return Natural.B;\n\n    case Note.C:\n      return Natural.C;\n    case Note.CSharp:\n      return Natural.C;\n\n    case Note.DFlat:\n      return Natural.D;\n    case Note.D:\n      return Natural.D;\n    case Note.DSharp:\n      return Natural.D;\n\n    case Note.EFlat:\n      return Natural.E;\n    case Note.E:\n      return Natural.E;\n\n    case Note.F:\n      return Natural.F;\n    case Note.FSharp:\n      return Natural.F;\n\n    case Note.GFlat:\n      return Natural.G;\n    case Note.G:\n      return Natural.G;\n    case Note.GSharp:\n      return Natural.G;\n  }\n}\n\nexport function modification(note: Note): Modification {\n  switch (note) {\n    case Note.A:\n    case Note.B:\n    case Note.C:\n    case Note.D:\n    case Note.E:\n    case Note.F:\n    case Note.G:\n      return Modification.None;\n\n    case Note.ASharp:\n    case Note.CSharp:\n    case Note.DSharp:\n    case Note.FSharp:\n    case Note.GSharp:\n      return Modification.Sharp;\n\n    case Note.AFlat:\n    case Note.BFlat:\n    case Note.DFlat:\n    case Note.EFlat:\n    case Note.GFlat:\n      return Modification.Flat;\n  }\n}\n\n/**\n    * Non-natural notes have two names (e.g., C sharp and D flat).\n    * If the provided note is not natural, the other name will be returned.\n    * If it is natural, the original note will be returned.\n  \n    * ## Example\n    * ```typescript\n    * assert(Note.DFlat === alternativeName(Note.CSharp));\n    * assert(Note.C === alternativeName(Note.C));\n    * ```\n    */\nexport function alternativeName(note: Note): Note {\n  switch (note) {\n    case Note.AFlat:\n      return Note.GSharp;\n    case Note.ASharp:\n      return Note.BFlat;\n\n    case Note.BFlat:\n      return Note.ASharp;\n\n    case Note.CSharp:\n      return Note.DFlat;\n\n    case Note.DFlat:\n      return Note.CSharp;\n    case Note.DSharp:\n      return Note.EFlat;\n\n    case Note.EFlat:\n      return Note.DSharp;\n\n    case Note.FSharp:\n      return Note.GFlat;\n\n    case Note.GFlat:\n      return Note.FSharp;\n    case Note.GSharp:\n      return Note.AFlat;\n\n    case Note.A:\n    case Note.B:\n    case Note.C:\n    case Note.D:\n    case Note.E:\n    case Note.F:\n    case Note.G:\n      return note;\n  }\n}\n\nexport function noteStrings(\n  note: Note,\n  distinctSharpsAndFlats: boolean\n): string {\n  const alt = alternativeName(note);\n  if (alt === note || distinctSharpsAndFlats) {\n    return noteString(note);\n  } else {\n    return noteString(note) + \"/\" + noteString(alt);\n  }\n}\n\nexport function noteString(note: Note): string {\n  return naturalString(natural(note)) + modificationString(modification(note));\n}\n\nexport function naturalString(nat: Natural): string {\n  return Natural[nat];\n}\n\nexport function modificationString(mod: Modification): string {\n  switch (mod) {\n    case Modification.None:\n      return \"\";\n    case Modification.Sharp:\n      return \"♯\";\n    case Modification.Flat:\n      return \"♭\";\n  }\n}\n\nexport function getRandomNextNote(\n  prev: Note[],\n  settings: Settings\n): undefined | Note {\n  const possibleNextNotes = getPossibleNextNotes(prev, settings);\n  return randomElement(possibleNextNotes);\n}\n\nexport function getPossibleNextNotes(prev: Note[], settings: Settings): Note[] {\n  let possible = ALL_NOTES.slice();\n\n  if (settings.naturalsOnly) {\n    possible = possible.filter(\n      (note) => modification(note) === Modification.None\n    );\n  }\n\n  if (settings.allowRepeats) {\n    return possible;\n  }\n\n  if (settings.distinctSharpsAndFlats) {\n    possible = possible.filter((note) => !prev.includes(note));\n  } else {\n    possible = possible.filter(\n      (note) => !prev.includes(note) && !prev.includes(alternativeName(note))\n    );\n  }\n\n  return possible;\n}\n\nexport function randomElement<T>(arr: T[]): undefined | T {\n  if (arr.length === 0) {\n    return undefined;\n  } else {\n    return arr[Math.floor(Math.random() * arr.length)];\n  }\n}\n","import { DEFAULT_SETTINGS, Note, Settings } from \"./businessLogic\";\n\nenum LocalStorageKey {\n  Settings = \"RandNote.Settings\",\n  NoteHistory = \"RandNote.NoteHistory\",\n}\n\nexport function loadSettings(): Settings {\n  const s = localStorage.getItem(LocalStorageKey.Settings);\n  if (s === null) {\n    return DEFAULT_SETTINGS;\n  }\n\n  try {\n    const parsed = JSON.parse(s);\n    if (isValidSettings(parsed)) {\n      return parsed;\n    }\n  } catch {}\n\n  return DEFAULT_SETTINGS;\n}\n\nfunction isValidSettings(x: unknown): x is Settings {\n  return (\n    \"object\" === typeof x &&\n    x !== null &&\n    \"boolean\" === typeof (x as any).naturalsOnly &&\n    \"boolean\" === typeof (x as any).allowRepeats &&\n    \"boolean\" === typeof (x as any).distinctSharpsAndFlats\n  );\n}\n\nexport function saveSettings(settings: Settings) {\n  const s = JSON.stringify(settings);\n  localStorage.setItem(LocalStorageKey.Settings, s);\n}\n\nexport function loadNoteHistory(): Note[] {\n  const s = localStorage.getItem(LocalStorageKey.NoteHistory);\n  if (s === null) {\n    return [];\n  }\n\n  try {\n    const parsed = JSON.parse(s);\n    if (isValidNoteList(parsed)) {\n      return parsed;\n    }\n  } catch {}\n\n  return [];\n}\n\nfunction isValidNoteList(x: unknown): x is Note[] {\n  return Array.isArray(x) && x.every(isNote);\n}\n\nfunction isNote(x: unknown): x is Note {\n  return \"number\" === typeof Note[x as any];\n}\n\nexport function saveNoteHistory(history: Note[]) {\n  const s = JSON.stringify(history);\n  localStorage.setItem(LocalStorageKey.NoteHistory, s);\n}\n","import React from \"react\";\nimport \"./App.css\";\nimport {\n  State,\n  Note,\n  getPossibleNextNotes,\n  noteStrings,\n  getRandomNextNote,\n  Settings,\n} from \"./businessLogic\";\nimport {\n  loadSettings,\n  loadNoteHistory,\n  saveSettings,\n  saveNoteHistory,\n} from \"./persistentState\";\n\nexport default class App extends React.Component<{}, State> {\n  constructor(props: {}) {\n    super(props);\n\n    this.state = {\n      isSettingsOpen: false,\n      settings: loadSettings(),\n      history: loadNoteHistory(),\n    };\n\n    this.bindMethods();\n  }\n\n  bindMethods() {\n    this.onCloseSettingsClick = this.onCloseSettingsClick.bind(this);\n    this.onNaturalsOnlyChange = this.onNaturalsOnlyChange.bind(this);\n    this.onAllowRepeatsChange = this.onAllowRepeatsChange.bind(this);\n    this.onDistinctSharpsAndFlatsChange = this.onDistinctSharpsAndFlatsChange.bind(\n      this\n    );\n\n    this.onOpenSettingsClick = this.onOpenSettingsClick.bind(this);\n    this.onClearHistoryClick = this.onClearHistoryClick.bind(this);\n    this.onNoteScreenClick = this.onNoteScreenClick.bind(this);\n  }\n\n  render() {\n    if (this.state.isSettingsOpen) {\n      return this.renderSettingsPage();\n    } else {\n      return this.renderNotePage();\n    }\n  }\n\n  renderSettingsPage(): React.ReactElement {\n    return (\n      <div className=\"App\">\n        <section>\n          <button onClick={this.onCloseSettingsClick}>Close</button>\n        </section>\n        <section className=\"Settings\">\n          <label className=\"Setting\">\n            <input\n              type=\"checkbox\"\n              checked={this.state.settings.naturalsOnly}\n              onChange={this.onNaturalsOnlyChange}\n            />\n            Naturals only\n          </label>\n          <label className=\"Setting\">\n            <input\n              type=\"checkbox\"\n              checked={this.state.settings.allowRepeats}\n              onChange={this.onAllowRepeatsChange}\n            />\n            Allow repeats\n          </label>\n          <label className=\"Setting\">\n            <input\n              type=\"checkbox\"\n              checked={this.state.settings.distinctSharpsAndFlats}\n              onChange={this.onDistinctSharpsAndFlatsChange}\n            />\n            Distinct sharps and flats\n          </label>\n        </section>\n      </div>\n    );\n  }\n\n  onCloseSettingsClick() {\n    this.setState({ isSettingsOpen: false });\n  }\n\n  onNaturalsOnlyChange(event: React.ChangeEvent<HTMLInputElement>) {\n    this.updateSetting(\"naturalsOnly\", event.target.checked);\n  }\n\n  onAllowRepeatsChange(event: React.ChangeEvent<HTMLInputElement>) {\n    this.updateSetting(\"allowRepeats\", event.target.checked);\n  }\n\n  onDistinctSharpsAndFlatsChange(event: React.ChangeEvent<HTMLInputElement>) {\n    this.updateSetting(\"distinctSharpsAndFlats\", event.target.checked);\n  }\n\n  updateSetting<K extends keyof Settings>(setting: K, value: Settings[K]) {\n    this.setState((prevState) => {\n      const newSettings = { ...prevState.settings, [setting]: value };\n      saveSettings(newSettings);\n      return {\n        ...prevState,\n        settings: newSettings,\n      };\n    });\n  }\n\n  renderNotePage(): React.ReactElement {\n    const currentNote: Note | undefined = this.state.history[\n      this.state.history.length - 1\n    ];\n    const { distinctSharpsAndFlats } = this.state.settings;\n\n    return (\n      <div\n        className={\n          \"App\" +\n          (getPossibleNextNotes(this.state.history, this.state.settings)\n            .length === 0\n            ? \" LastNote\"\n            : \"\")\n        }\n        onClick={this.onNoteScreenClick}\n      >\n        <section>\n          <button onClick={this.onOpenSettingsClick}>Settings</button>\n          <button onClick={this.onClearHistoryClick}>Reset</button>\n        </section>\n        <section>\n          <h2>Current note</h2>\n          {currentNote !== undefined ? (\n            <div className=\"CurrentNote\">\n              {noteStrings(currentNote, distinctSharpsAndFlats)}\n            </div>\n          ) : (\n            <div>Tap to generate</div>\n          )}\n        </section>\n        <section>\n          {this.state.history.map((note) => (\n            <div className=\"HistoryNote\">\n              {noteStrings(note, distinctSharpsAndFlats)}\n            </div>\n          ))}\n        </section>\n      </div>\n    );\n  }\n\n  onOpenSettingsClick() {\n    this.setState({ isSettingsOpen: true });\n  }\n\n  onClearHistoryClick() {\n    this.setState({ history: [] });\n    saveNoteHistory([]);\n  }\n\n  onNoteScreenClick(event: React.MouseEvent) {\n    if (event.target instanceof HTMLButtonElement) {\n      return;\n    }\n\n    this.setState((prevState) => {\n      const nextNote = getRandomNextNote(prevState.history, prevState.settings);\n      const newHistory =\n        nextNote === undefined\n          ? prevState.history\n          : prevState.history.concat([nextNote]);\n      saveNoteHistory(newHistory);\n      return { ...prevState, history: newHistory };\n    });\n  }\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://cra.link/PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://cra.link/PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://cra.link/PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log('No internet connection found. App is running in offline mode.');\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport * as serviceWorkerRegistration from \"./serviceWorkerRegistration\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://cra.link/PWA\nserviceWorkerRegistration.register();\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}